// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TeamMemberships TeamMemberships[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  ADMIN
  MEMBER
  GUEST
}

model Teams {
  id               String            @id @default(uuid())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  team_memberships TeamMemberships[]
  folders          Folders[]
}

model TeamMemberships {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Teams    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folders {
  id             String    @id @unique @default(uuid())
  name           String
  parentFolderId String?
  teamId         String
  files          Files[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  parentFolder   Folders?  @relation("ParentChild", fields: [parentFolderId], references: [id], onDelete: Cascade)
  subFolders     Folders[] @relation("ParentChild")
  team           Teams     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Files {
  id        String   @id @unique @default(uuid())
  folderId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folder    Folders  @relation(fields: [folderId], references: [id], onDelete: Cascade)
}
